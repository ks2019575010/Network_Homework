1.TCP (Transmission Control Protocol): 전송 제어 프로토콜

전송계층(Transport Layer,4계층)
TCP는 근거리 통신망이나 인트라넷, 인터넷에 연결된 컴퓨터에서 실행되는 프로그램 간에 일련의 옥텟(8비트)을 안정적으로, 순서대로, 에러없이 교환할 수 있게 한다.
통신하고자 하는 양쪽 단말이 통신할 준비가 되었는지, 데이터가 제대로 전송되었는지, 데이터가 가는도중 변질 되지 않았는지, 수신자가 얼마나 받았고 빠진 부분은 없는지
등을 점검한다.
TCP/IP로 묶여 사용된다.

2.IP (Internet Protocol): 

네트워크 계층(Network Layer,3계층)
송신 호스트와 수신 호스트가 패킷 교환 네트워크에서 정보를 주고받는 데 사용하며, OSI 네트워크 계층에서 호스트의 주소지정과 패킷 분할 및 조립 기능을 담당한다.
비신뢰성(unreliability)과 비연결성(connectionlessness)이 특징

비신뢰성 : 흐름에 관여하지 않기 때문에 보낸 정보가 제대로 갔는지 보장하지 않는다. 
          패킷 전송과 정확한 순서를 보장하려면 TCP(Transmission Control Protocol)와 같은 IP의 상위 프로토콜을 이용해야 한다.

비연결성 : 송신자와 수신자가 데이터 전송을 위해 서로 연결될 필요가 없다.
          송신자는 수신자의 기기가 꺼져 있던지 고장나서 사용이 불가능한 상태이던지 상관없이 데이터를 보낼 수 있다.(물론 이러한 경우에 수신자는 데이터를 받지 못한다.)

현재 개인이 사용하는 IP는 4번째 버전인 IPv4(32비트)를 사용하고 있으며 기업은 6번째 버전인 IPv6(128비트)를 사용하기도 한다.
IPv4가 빠르게 고갈되면 IPv6가 대중화가 될 가능성이 있다.

3.UDP (User Datagram Protocol): 사용자 데이터그램 프로토콜

전송계층(Transport Layer,4계층)
데이터를 데이터그램(독립적인 관계를 지니는 패킷) 단위로 처리하는 프로토콜
TCP와 달리 UDP는 비연결형 프로토콜이다. 즉, 연결을 위해 할당되는 논리적인 경로가 없다.
그렇기 때문에 각각의 패킷은 다른 경로로 전송되고, 각각의 패킷은 독립적인 관계를 지니게 되는데 이렇게 데이터를 서로 다른 경로로 독립적으로 처리하게 된다.
신뢰성은 낮지만 속도가 빠르기 때문에 실시간 스트리밍에 자주 사용된다.

4.HTTP (Hypertext Transfer Protocol):

응용계층(Application Layer,7계층)
클라이언트와 서버 간 통신을 위한 통신 규칙 세트 또는 프로토콜
HTTP는 크게 request와 response를 위한 메시지로 구분되어있다.
HTTP의 대표적인 특징 2가지

비연결지향(Connectionless) : 클라이언트가 서버에게 Request를 보내고 서버가 클라이언트에게 Response를 보내면 접속을 종료한다.

무상태(Stateless) : 통신이 끝나면 상태정보를 유지하지 않는다.

5.HTTPS (Hypertext Transfer Protocol Secure):

응용계층(Application Layer,7계층)
HTTP의 확장 버전 또는 더 안전한 버전,브라우저와 서버가 데이터를 전송하기 전에 안전하고 암호화된 연결을 설정한다.
기본 골격이나 사용 목적 등은 http와 거의 동일 하지만 데이터를 주고 받는 과정에 보안요소가 추가된다는 것이 가장 큰 차이점이다.
http와 달리 https는 보안 기능이 추가된 만큼 http보다 https의 처리 속도가 더 느리다.
하지만 요즘은 서버와 네트워크 상태가 우수하면서 http와 https의 차이가 체감하기 어려울 만큼 좁혀졌고 https를 사용하는 웹 사이트가 많아졌다

6.DNS (Domain Name System):

응용계층(Application Layer,7계층)
인터넷 주소창에 문자를 입력했을때, 해당하는 IP주소로 변경해주는 시스템.
예)www.naver.com -> 해당 ip주소 이동

구성요소
도메인 네임 공간(Domain Name Space) : 도메인 네임을 중복되지 않게 생성하여 사용하도록 정의된 구성 체계

리소스 레코드(Resource Record) : 도메인 네임에 설정할 수 있는 데이터 타입

네임서버(Name Server) : 도메인 데이터를 보유하고, 도메인 네임에 대한 질의를 수신했을 때 응답하는 역할의 서버

리졸버(Resolver) : 도메인 네임의 데이터 조회기능을 수행하는 SW 형태의 루틴

DNS 동작 원리
2가지 쿼리가 있다.

Iterative Query: 요청했다가 받아온 다음 다른 서버에 요청하는 형태.

Recursive Query: 요청을 하면 요청한 서버에서 다른 서버에 요청하고 최종적으로 받은게 돌아오면서 사용자에게 전달되는 형태.

아래는 Iterative Query 예시이다.

1.브라우저가 www.naver.com을 검색하면, 사용하고 있는 통신사의 ISP 서버(Recursive DNS server)에 도메인에 해당하는 IP 주소 요청
2.ISP 서버에선 해당하는 캐시가 있을경우, 주소 반환. 없으면 Root DNS server에 문의.
3.Root 는 xxx.xxxx.com 도메인을 보고 COM 도메인을 관리하는 TLD server주소를 안내
4.ISP 서버는 COM TLD 서버에 다시 요청
5.TLD 서버는 해당하는 authoritative DNS server 안내
6.ISP 서버는 authoritative DNS server에게 또 다시 요청
7.authoritative DNS server는 www.naver.com에 해당하는 IP주소를 반환
8.ISP서버는 해당하는 정보를 캐시에 저장하고 브라우저에게 IP 주소 안내
 
이후 브라우저는 해당 IP주소에게 정보를 요청하게 됨.

7.FTP (File Transfer Protocol):

응용계층(Application Layer,7계층)
TCP/IP 네트워크 상에서 컴퓨터들이 파일을 교환하기 위해 1971년에 최초로 공개된 통신 규약(프로토콜)
FTP는 비밀번호가 평문으로 전송되어 보안성이 매우 떨어진다.
FTP는 주로 대량의 파일을 처리할 때 사용되는데 특히 웹 개발 시 유용하다.
웹사이트를 수정할 때 FTP 세션을 통해 파일 전송을 관리하면 특정한 파일 업로드, 이미지 파일 추가, 웹 템플릿 이동 등의 작업을 수월하게 처리할 수 있다.

FTP는 다른 프로토콜들과 다르게 포트(port) 번호를 기본 두 개를 사용하도록 제작되었다.

1. 제어 포트 : 제어 포트는 포트번호 21번으로 클라이언트와 서버 사이의 명령, 제어 등을 송수신을 담당

2. 데이터 포트 : 데이터 포트는 20번으로 클라이언트와 서버 사이의 직접적인 파일 송/수신을 담당

FTP는 모드도 두 개가 존재한다.

1. Active mode : 클라이언트가 서버에게 연결할 데이터 포트를 알려주는 모드

2. Passive mode : 서버가 클라이언트에게 연결할 데이터 포트를 알려주는 모드

처음 연결을 시도할 때 21번 포트로 서로 신호를 주어 받고 그 후 데이터 포트를 연결할 때 Active mode는 클라이언트가 서버에게 20번 포트로 연결하라고 알려주면 서버는 클라이언트의 20번 포트로 연결된다.

8.SSH (Secure Shell):

응용계층(Application Layer,7계층)
컴퓨터와 컴퓨터가 인터넷과 같은 Public Network를 통해 서로 통신을 할 때 보안적으로 안전하게 통신을 하기 위해 사용하는 프로토콜
데이터 전송이나 원격제어에 사용한다.

9.SMTP (Simple Mail Transfer Protocol):

응용계층(Application Layer,7계층)
이메일 전송을 위한 프로토콜.
연결지향적이고 텍스트 기반으로 작동하는 프로토콜이다. SMTP 클라이언트와 SMTP 서버 사이에 SMTP 세션이 생성되며, 명령행을 이용해 메일을 송수신한다. SMTP 교환은 다음의 세 명령어를 통해 이루어진다.
MAIL 명령어: 수신자 지정
RCPT 명령어: 송신자 지정
DATA 명령어: 메시지 내용의 시작이 되는 부분이다. 메시지 헤더와 바디로 구성된다

10.SNMP (Simple Network Management Protocol):

응용계층(Application Layer,7계층
UDP/IP(사용자 데이터그램 프로토콜/인터넷 프로토콜)를 사용하여 이더넷 연결을 통해 네트워크 관리 작업을 수행하는 응용 계층 프로토콜
메시지는 단순히 요청과 응답 형식의 프로토콜에 의해 교환되기 때문에 전송계층 프로토콜로 UDP 프로토콜을 사용한다.
